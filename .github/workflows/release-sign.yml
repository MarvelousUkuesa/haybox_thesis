name: Release (Sign & Attest)

on:
  push:
    tags: ["v*.*.*"]
  workflow_dispatch: {}

jobs:
  build-sign:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write          # for Cosign keyless
      packages: write          # push to GHCR
      attestations: write      # publish SLSA provenance

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Ensure GHCR path is lowercase; set common image refs
      - name: Set image vars (lowercase)
        id: vars
        run: |
          REPO_LC="${GITHUB_REPOSITORY,,}"
          echo "IMAGE_REPO=ghcr.io/$REPO_LC" >> "$GITHUB_ENV"
          echo "IMAGE_TAG=${GITHUB_REF_NAME}" >> "$GITHUB_ENV"
          echo "IMAGE_REF=ghcr.io/$REPO_LC:${GITHUB_REF_NAME}" >> "$GITHUB_ENV"

      - name: Install deps & build app
        run: |
          npm ci
          npm run build

      - name: Build image
        run: |
          cat > Dockerfile <<'EOF'
          FROM node:20-alpine
          WORKDIR /app
          COPY package*.json ./
          RUN npm ci --omit=dev
          COPY dist ./dist
          CMD ["node","dist/main.js"]
          EOF
          docker build -t "$IMAGE_REF" .

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image
        run: docker push "$IMAGE_REF"

      # âœ… Robust digest resolution: pull and read RepoDigests (no buildx templating)
      - name: Get image digest
        id: digest
        run: |
          set -euo pipefail
          docker pull "$IMAGE_REF" >/dev/null
          REF=$(docker inspect --format='{{index .RepoDigests 0}}' "$IMAGE_REF")
          echo "Resolved reference: $REF"
          DIGEST="${REF#*@}"
          if [ -z "$DIGEST" ]; then
            echo "Failed to resolve digest"; exit 1
          fi
          echo "digest=$DIGEST" >> "$GITHUB_OUTPUT"
          echo "Resolved digest: $DIGEST"

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      # Sign using immutable digest reference
      - name: Sign image (keyless OIDC)
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          IMAGE_IMMUTABLE="${IMAGE_REPO}@${{ steps.digest.outputs.digest }}"
          cosign sign --yes "$IMAGE_IMMUTABLE"

      # SBOM for the immutable digest
      - name: Generate SBOM (CycloneDX)
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.IMAGE_REPO }}@${{ steps.digest.outputs.digest }}
          output-file: sbom.cdx.json

      # SLSA provenance: repo-only subject-name (no tag) + digest
      - name: Generate build provenance (attestation)
        uses: actions/attest-build-provenance@v1
        env:
          IMAGE: ""   # prevent any tagged IMAGE env leaking in
        with:
          subject-name: ${{ env.IMAGE_REPO }}                  # e.g. ghcr.io/owner/repo
          subject-digest: ${{ steps.digest.outputs.digest }}   # sha256:...
          push-to-registry: true

      - name: Prepare artifact dirs
        run: |
          mkdir -p .zap || true
          mkdir -p reports || true

      - name: Upload evidence bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: evidence-bundle
          path: |
            sbom.cdx.json
            .zap/*
            reports/*

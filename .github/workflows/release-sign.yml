name: Release (Sign & Attest)
on:
  push:
    tags: ["v*.*.*"]
  workflow_dispatch: {}

jobs:
  build-sign:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write
      attestations: write

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: "20" }

      # Create lowercase repo + refs for GHCR
      - name: Set image vars (lowercase)
        id: vars
        run: |
          REPO_LC="${GITHUB_REPOSITORY,,}"
          echo "repo_lc=$REPO_LC" >> "$GITHUB_OUTPUT"
          echo "image_repo=ghcr.io/$REPO_LC" >> "$GITHUB_OUTPUT"
          echo "IMAGE_REPO=ghcr.io/$REPO_LC" >> "$GITHUB_ENV"
          echo "IMAGE_TAG=ghcr.io/$REPO_LC:${GITHUB_REF_NAME}" >> "$GITHUB_ENV"

      - run: npm ci && npm run build

      - name: Build image
        run: |
          cat > Dockerfile <<'EOF'
          FROM node:20-alpine
          WORKDIR /app
          COPY package*.json ./
          RUN npm ci --omit=dev
          COPY dist ./dist
          CMD ["node","dist/main.js"]
          EOF
          docker build -t "$IMAGE_TAG" .

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image
        run: docker push "$IMAGE_TAG"

      - name: Get image digest
        id: digest
        run: |
          DIGEST=$(docker buildx imagetools inspect "$IMAGE_TAG" --format '{{.Digest}}')
          echo "digest=$DIGEST" >> "$GITHUB_OUTPUT"
          echo "Resolved digest: $DIGEST"

      - name: Prepare reports dir
        run: mkdir -p reports

      - name: Generate SBOM (CycloneDX)
        uses: anchore/sbom-action@v0
        with:
          # Use immutable digest ref to avoid tag drift
          image: ${{ steps.vars.outputs.image_repo }}@${{ steps.digest.outputs.digest }}
          output-file: reports/sbom.cdx.json

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign image (keyless OIDC)
        env: { COSIGN_EXPERIMENTAL: "1" }
        run: |
          IMAGE_REF="${{ steps.vars.outputs.image_repo }}@${{ steps.digest.outputs.digest }}"
          cosign sign --yes "$IMAGE_REF"

      - name: Attest SBOM (cyclonedx)
        env: { COSIGN_EXPERIMENTAL: "1" }
        run: |
          IMAGE_REF="${{ steps.vars.outputs.image_repo }}@${{ steps.digest.outputs.digest }}"
          cosign attest --yes --predicate reports/sbom.cdx.json --type cyclonedx "$IMAGE_REF"

      # IMPORTANT: make sure no tagged IMAGE env leaks into this action
      - name: Generate build provenance (SLSA)
        uses: actions/attest-build-provenance@v1
        env:
          IMAGE: "" # prevent the action from reading a tagged IMAGE env
        with:
          subject-name: ${{ steps.vars.outputs.image_repo }} # repo only, no :tag
          subject-digest: ${{ steps.digest.outputs.digest }} # sha256:...
          push-to-registry: true

      - name: Write M5 checklist
        run: |
          node -e 'require("fs").writeFileSync("reports/m5_evidence.json", JSON.stringify({
            release_tag: process.env.GITHUB_REF_NAME || "unknown",
            sbom_attached: true,
            image_signed: true,
            provenance_attested: true
          }, null, 2))'

      - name: Upload evidence bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: evidence-bundle
          path: reports/**

name: PR Gate (Fast Security)
on:
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: read
  security-events: write
  actions: read

jobs:
  pr-gate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # 1) Detect where your Node app actually is
      - name: Find app directory
        id: find
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package.json ]; then
            echo "appdir=." >> "$GITHUB_OUTPUT"
          elif [ -f paybox-stdd-starter/package.json ]; then
            echo "appdir=paybox-stdd-starter" >> "$GITHUB_OUTPUT"
          else
            echo "‚ùå Could not find package.json at repo root or paybox-stdd-starter/"
            echo "Repo tree (top 200 lines):"
            ls -laR | sed -n '1,200p'
            exit 1
          fi
          echo "Using appdir: $(cat "$GITHUB_OUTPUT" | sed -n 's/^appdir=//p')"

      - name: Debug layout
        run: |
          echo "Repo root:"
          pwd
          ls -la
          echo "App dir:"
          cd "${{ steps.find.outputs.appdir }}"
          pwd
          ls -la

      # 2) Setup Node + cache using the discovered lockfile
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ steps.find.outputs.appdir }}/package-lock.json

      # 3) Install dev deps (Jest lives in devDependencies)
      - name: Install deps
        working-directory: ${{ steps.find.outputs.appdir }}
        run: npm ci --include=dev

      - name: Show Jest version
        working-directory: ${{ steps.find.outputs.appdir }}
        run: npx jest --version

      # 4) Run the full security test pack
      - name: Run tests
        working-directory: ${{ steps.find.outputs.appdir }}
        run: npm run test:sec

      # 5) Semgrep (config path resolves for root or subdir)
      - name: Semgrep (curated)
        uses: returntocorp/semgrep-action@v1
        with:
          config: ${{ steps.find.outputs.appdir }}/.semgrep/semgrep.yml

      # 6) - name: Gitleaks
    uses: gitleaks/gitleaks-action@v2
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}   # <-- required for PRs
    with:
      args: >-
        detect
        --no-git
        --verbose
        --redact
        --config=${{ steps.find.outputs.appdir }}/.gitleaks.toml

  # OSV v2 runs as a reusable workflow (not a step)
  osv-scan:
    needs: pr-gate
    permissions:
      contents: read
      security-events: write
      actions: read
    uses: google/osv-scanner-action/.github/workflows/osv-scanner-reusable-pr.yml@v2.2.2

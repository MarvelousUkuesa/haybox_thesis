name: PR Gate (Fast Security)
on:
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: read
  security-events: write
  actions: read

jobs:
  pr-gate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # 1) Detect Node app path (your current helper)
      - name: Find app directory
        id: find
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package.json ]; then
            echo "appdir=." >> "$GITHUB_OUTPUT"
          elif [ -f paybox-stdd-starter/package.json ]; then
            echo "appdir=paybox-stdd-starter" >> "$GITHUB_OUTPUT"
          else
            echo "Could not find package.json at repo root or paybox-stdd-starter/"
            ls -laR | sed -n '1,200p'
            exit 1
          fi

      - name: Debug layout
        run: |
          echo "Repo root:"; pwd; ls -la
          echo "App dir:"; cd "${{ steps.find.outputs.appdir }}"; pwd; ls -la

      # 2) Node + cache
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: ${{ steps.find.outputs.appdir }}/package-lock.json

      # 3) Install
      - name: Install deps (incl. dev)
        working-directory: ${{ steps.find.outputs.appdir }}
        run: npm ci --include=dev

      - name: Show Jest version
        working-directory: ${{ steps.find.outputs.appdir }}
        run: npx jest --version

      # 4) Tests: functional FIRST, then security pack
      - name: Run functional tests
        working-directory: ${{ steps.find.outputs.appdir }}
        run: npm run test:functional

      - name: Run security RAT tests
        working-directory: ${{ steps.find.outputs.appdir }}
        run: npm run test:sec

      # 5) Semgrep
      - name: Semgrep (curated)
        uses: returntocorp/semgrep-action@v1
        with:
          config: ${{ steps.find.outputs.appdir }}/.semgrep/semgrep.yml

      # 6) Gitleaks
      - name: Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: >-
            detect
            --no-git
            --verbose
            --redact
            --config=${{ steps.find.outputs.appdir }}/.gitleaks.toml

  # 7) OSV v2 (keep as-is)
  osv-scan:
    needs: pr-gate
    permissions:
      contents: read
      security-events: write
      actions: read
    uses: google/osv-scanner-action/.github/workflows/osv-scanner-reusable-pr.yml@v2.2.2

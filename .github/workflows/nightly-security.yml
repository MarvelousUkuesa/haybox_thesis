name: Nightly Security
on:
  schedule:
    - cron: "0 2 * * *"      # daily 02:00 UTC
  workflow_dispatch: {}

jobs:
  nightly:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Build + start app in production mode
      - name: Build app
        run: |
          npm ci
          npm run build

      - name: Start app (prod)
        run: |
          HOST=0.0.0.0 PORT=3000 node dist/main.js & echo $! > app.pid
          # wait for /health then / as fallback
          npx --yes wait-on -t 30000 http://127.0.0.1:3000/health || \
          npx --yes wait-on -t 30000 http://127.0.0.1:3000

      # ZAP Baseline (write JSON/HTML/MD into .zap/)
      - name: ZAP Baseline (DAST)
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: "http://127.0.0.1:3000"
          cmd_options: "-a -m 5 -J .zap/report_json.json -w .zap/report_md.md -r .zap/report_html.html"
        continue-on-error: true

      # OSV Scanner (JSON)
      - name: Install OSV scanner
        run: |
          curl -sSfL https://raw.githubusercontent.com/google/osv-scanner/main/install.sh \
          | sh -s -- -b /usr/local/bin
      - name: OSV scan (JSON)
        run: |
          mkdir -p reports
          osv-scanner -r . --format json > reports/osv.json || true
        continue-on-error: true

      # Semgrep (JSON)
      - name: Install Semgrep
        run: pipx install semgrep
      - name: Semgrep (JSON)
        run: |
          mkdir -p reports
          semgrep --config .semgrep/semgrep.yml \
                  --skip-unknown-extensions \
                  --json --output reports/semgrep.json || true
        continue-on-error: true

      # Optional: Trivy FS scan (JSON)
      - name: Trivy filesystem scan (JSON)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: "fs"
          format: "json"
          output: "reports/trivy.json"
        continue-on-error: true

      # Aggregate counts robustly (no crashes if files are missing/empty)
      - name: Aggregate nightly counts
        run: |
          node - <<'NODE'
          const fs=require('fs');
          const exists = p => fs.existsSync(p) && fs.statSync(p).size>0;
          const read = p => exists(p) ? JSON.parse(fs.readFileSync(p,'utf8')) : null;

          const out = { Semgrep:0, OSV:0, Trivy:0, ZAP:{High:0,Medium:0,Low:0,Informational:0,Total:0} };

          const sem = read('reports/semgrep.json');
          if (sem?.results) out.Semgrep = sem.results.length;

          const osv = read('reports/osv.json');
          if (osv?.results) out.OSV = osv.results.length;

          const trivy = read('reports/trivy.json');
          if (trivy?.Results) {
            out.Trivy = trivy.Results.reduce((acc,r)=>acc+((r.Vulnerabilities||[]).length),0);
          }

          const zap = read('.zap/report_json.json') || read('report_json.json');
          if (zap) {
            const sites = Array.isArray(zap.site||zap.sites) ? (zap.site||zap.sites)
                        : ((zap.site||zap.sites) ? [zap.site||zap.sites] : []);
            for (const s of sites) {
              const alerts = s?.alerts || s?.alertsItems || [];
              for (const a of alerts) {
                const r = String(a.riskdesc||a.risk||'').toUpperCase();
                const bucket = r.includes('HIGH') ? 'High' : r.includes('MEDIUM') ? 'Medium' : r.includes('LOW') ? 'Low' : 'Informational';
                out.ZAP[bucket]++; out.ZAP.Total++;
              }
            }
          }

          fs.mkdirSync('reports',{recursive:true});
          fs.writeFileSync('reports/nightly_summary.json', JSON.stringify(out,null,2));
          console.log(JSON.stringify(out,null,2));
          NODE

      - name: Stop app
        if: always()
        run: kill $(cat app.pid) || true

      - name: Upload nightly artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nightly-artifacts
          path: |
            reports/**
            .zap/**
